import numpy as np
import scipy
from scipy.interpolate import griddata

R = np.linspace(0, 5, 51)
P = np.linspace(0, 1, 11)
N = np.linspace(1, 2, 2)

F = np.zeros((len(R), len(P), len(N)))

#4d points (R = 5,3,2,1.5,1.1,0.8,0.6,0.4,0.2)
points = np.array([
    [5.0, 0.000, 1, 1.00],
    [5.0, 0.132, 1, 0.95],
    [5.0, 0.152, 1, 0.90],
    [5.0, 0.162, 1, 0.85],
    [5.0, 0.168, 1, 0.80],
    [5.0, 0.172, 1, 0.75],
    [5.0, 0.174, 1, 0.70],
    [5.0, 0.176, 1, 0.65],
    [5.0, 0.178, 1, 0.60],
    [5.0, 0.179, 1, 0.55],
    [5.0, 0.179, 1, 0.50],

    [5.0, 0.173, 2, 1.00],
    [5.0, 0.186, 2, 0.95],
    [5.0, 0.190, 2, 0.90],
    [5.0, 0.192, 2, 0.85],
    [5.0, 0.193, 2, 0.80],
    [5.0, 0.195, 2, 0.75],
    [5.0, 0.195, 2, 0.70],
    [5.0, 0.195, 2, 0.65],
    [5.0, 0.195, 2, 0.60],
    [5.0, 0.195, 2, 0.55],
    [5.0, 0.195, 2, 0.50],

    [3.0, 0.000, 1, 1.00],
    [3.0, 0.187, 1, 0.95],
    [3.0, 0.222, 1, 0.90],
    [3.0, 0.240, 1, 0.85],
    [3.0, 0.252, 1, 0.80],
    [3.0, 0.260, 1, 0.75],
    [3.0, 0.266, 1, 0.70],
    [3.0, 0.270, 1, 0.65],
    [3.0, 0.273, 1, 0.60],
    [3.0, 0.276, 1, 0.55],
    [3.0, 0.277, 1, 0.50],

    [3.0, 0.000, 2, 1.00],
    [3.0, 0.261, 2, 0.95],
    [3.0, 0.288, 2, 0.90],
    [3.0, 0.301, 2, 0.85],
    [3.0, 0.307, 2, 0.80],
    [3.0, 0.312, 2, 0.75],
    [3.0, 0.315, 2, 0.70],
    [3.0, 0.316, 2, 0.65],
    [3.0, 0.318, 2, 0.60],
    [3.0, 0.319, 2, 0.55],
    [3.0, 0.320, 2, 0.50],

    [2.0, 0.000, 1, 1.00],
    [2.0, 0.241, 1, 0.95],
    [2.0, 0.290, 1, 0.90],
    [2.0, 0.317, 1, 0.85],
    [2.0, 0.336, 1, 0.80],
    [2.0, 0.349, 1, 0.75],
    [2.0, 0.358, 1, 0.70],
    [2.0, 0.365, 1, 0.65],
    [2.0, 0.371, 1, 0.60],
    [2.0, 0.375, 1, 0.55],
    [2.0, 0.378, 1, 0.50],

    [2.0, 0.000, 2, 1.00],
    [2.0, 0.348, 2, 0.95],
    [2.0, 0.393, 2, 0.90],
    [2.0, 0.415, 2, 0.85],
    [2.0, 0.429, 2, 0.80],
    [2.0, 0.438, 2, 0.75],
    [2.0, 0.445, 2, 0.70],
    [2.0, 0.449, 2, 0.65],
    [2.0, 0.453, 2, 0.60],
    [2.0, 0.455, 2, 0.55],
    [2.0, 0.457, 2, 0.50],

    [1.5, 0.000, 1, 1.00],
    [1.5, 0.284, 1, 0.95],
    [1.5, 0.344, 1, 0.90],
    [1.5, 0.379, 1, 0.85],
    [1.5, 0.402, 1, 0.80],
    [1.5, 0.419, 1, 0.75],
    [1.5, 0.432, 1, 0.70], 
    [1.5, 0.441, 1, 0.65],
    [1.5, 0.449, 1, 0.60],
    [1.5, 0.455, 1, 0.55],
    [1.5, 0.459, 1, 0.50],

    [1.5, 0.000, 2, 1.00],
    [1.5, 0.417, 2, 0.95],
    [1.5, 0.476, 2, 0.90],
    [1.5, 0.507, 2, 0.85],
    [1.5, 0.527, 2, 0.80],
    [1.5, 0.541, 2, 0.75],
    [1.5, 0.550, 2, 0.70], 
    [1.5, 0.558, 2, 0.65],
    [1.5, 0.563, 2, 0.60],
    [1.5, 0.567, 2, 0.55],
    [1.5, 0.570, 2, 0.50],

    [1.1, 0.000, 1, 1.00],
    [1.1, 0.330, 1, 0.95],
    [1.1, 0.403, 1, 0.90],
    [1.1, 0.445, 1, 0.85],
    [1.1, 0.474, 1, 0.80],
    [1.1, 0.495, 1, 0.75],
    [1.1, 0.511, 1, 0.70],
    [1.1, 0.523, 1, 0.65],
    [1.1, 0.532, 1, 0.60],
    [1.1, 0.539, 1, 0.55],
    [1.1, 0.544, 1, 0.50],

    [0.8, 0.000, 1, 1.00],
    [0.8, 0.392, 1, 0.95],
    [0.8, 0.477, 1, 0.90],
    [0.8, 0.526, 1, 0.85],
    [0.8, 0.559, 1, 0.80],
    [0.8, 0.583, 1, 0.75],
    [0.8, 0.602, 1, 0.70],
    [0.8, 0.615, 1, 0.65],
    [0.8, 0.626, 1, 0.60],
    [0.8, 0.634, 1, 0.55],
    [0.8, 0.640, 1, 0.50],

    [0.6, 0.000, 1, 1.00],
    [0.6, 0.447, 1, 0.95],
    [0.6, 0.540, 1, 0.90],
    [0.6, 0.594, 1, 0.85],
    [0.6, 0.629, 1, 0.80],
    [0.6, 0.655, 1, 0.75],
    [0.6, 0.675, 1, 0.70],
    [0.6, 0.689, 1, 0.65],
    [0.6, 0.700, 1, 0.60],
    [0.6, 0.709, 1, 0.55],
    [0.6, 0.715, 1, 0.50],

    [0.4, 0.000, 1, 1.00],
    [0.4, 0.528, 1, 0.95],
    [0.4, 0.630, 1, 0.90],
    [0.4, 0.686, 1, 0.85],
    [0.4, 0.722, 1, 0.80],
    [0.4, 0.747, 1, 0.75],
    [0.4, 0.766, 1, 0.70],
    [0.4, 0.779, 1, 0.65],
    [0.4, 0.790, 1, 0.60],
    [0.4, 0.797, 1, 0.55],
    [0.4, 0.803, 1, 0.50],

    [0.2, 0.000, 1, 1.00],
    [0.2, 0.666, 1, 0.95],
    [0.2, 0.767, 1, 0.90],
    [0.2, 0.817, 1, 0.85],
    [0.2, 0.846, 1, 0.80],
    [0.2, 0.865, 1, 0.75],
    [0.2, 0.878, 1, 0.70],
    [0.2, 0.888, 1, 0.65],
    [0.2, 0.894, 1, 0.60],
    [0.2, 0.900, 1, 0.55],
    [0.2, 0.902, 1, 0.50]
])

R_values = points[:, 0]
P_values = points[:, 1]
N_values = points[:, 2]
F_values = points[:, 3]

def find_F(P, R, N):
    return griddata(
        points = np.column_stack((P_values, R_values, N_values)),
        values = F_values,
        xi = np.array([[P, R, N]]),
        method = 'linear'
    )[0]