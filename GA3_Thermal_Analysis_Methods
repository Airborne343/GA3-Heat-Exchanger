import numpy as np
import math
import matplotlib as plt
from scipy.optimize import differential_evolution
import time

#initialise variables
cp_w = 4179
rho_w = 990.1
k_w = 0.632
k_tube = 386
L = 0.35
d_inner = 0.006
Pr = 4.31
mu_w = 6.51*(10^-4)

Thot_in = 60
Tcold_in = 20
m_hot = 0.47
m_cold = 0.5
H = 3927
N_tubes = 13
A_ht = N_tubes * np.pi * L * d_inner
F = 1 

#ENTU Method
def effective_NTU(H, N_tubes, m_hot, Thot_in, m_cold, Tcold_in, cp_w, N_shell):
    C_hot = cp_w * m_hot
    C_cold = cp_w * m_cold
    C_min = min(C_hot, C_cold)
    C_max = max(C_hot, C_cold)
    C_r = C_min/C_max
    
    A_ht = N_tubes * np.pi * 0.35 * 0.006
    NTU = (H*A_ht)/C_min

    eff_1 = 2/(1 + C_r + np.sqrt(1 + C_r**2)*((1 + np.exp(-NTU * np.sqrt(1 + C_r**2)))/(1 - np.exp(-NTU * np.sqrt(1 + C_r**2)))))

    if N_shell == 1:
        eff = eff_1
    
    else:
        eff = (((1-eff_1*C_r)/(1-eff_1))**N_shell - 1)/(((1-eff_1*C_r)/(1-eff_1))**N_shell - C_r)

    q_max = C_min * (Thot_in - Tcold_in)
    q_abs = eff * q_max 

    Thot_out = Thot_in - q_abs/C_hot
    Tcold_out = Tcold_in + q_abs/C_cold

    return [NTU, eff, Thot_out, Tcold_out, q_abs]

result = effective_NTU(H, N_tubes, m_hot, Thot_in, m_cold, Tcold_in, cp_w, 1)

print(f"ENTU NTU: {result[0]:.3f}")
print(f"ENTU Effectiveness: {result[1]:.3f}")
print(f"ENTU Hot Side Outlet Temperature: {result[2]:.2f} C")
print(f"ENTU Cold Side Outlet Temperature: {result[3]:.2f} C")
print(f"ENTU Heat Transfer: {result[4]:.2f} W")

#LMTD Method
n_iter = 100
convergence_thresh = 1e-4

C_hot = m_hot * cp_w
C_cold = m_cold * cp_w

Thot_out_init = 59.99

for i in range(n_iter):
    Q_val = C_hot * (Thot_in - Thot_out_init)
    Tcold_out = Tcold_in + Q_val/C_cold

    Delta_T1 = Thot_in - Tcold_out
    Delta_T2 = Thot_out_init - Tcold_in

    if Delta_T1 <=0 or Delta_T2 <=0:
        raise ValueError("Unrealistic Guess for Delta T")
    
    LMTD = (Delta_T1 - Delta_T2)/np.log(Delta_T1/Delta_T2)
    Q_LMTD = H * A_ht * F * LMTD
    Thot_out_LMTD = Thot_in - Q_LMTD/C_hot

    if abs(Thot_out_LMTD - Thot_out_init) < convergence_thresh:
        break

    Thot_out_init = 0.1 * Thot_out_LMTD + 0.9 * Thot_out_init

Q_fn = (Thot_in - Thot_out_LMTD) * C_hot
Tcold_out_fn = Tcold_in + Q_fn/C_cold

print(f"Convergence in {i+1} iterations:")
print(f"Hot Side Outlet Temperature: {Thot_out_LMTD:.2f} C")
print(f"Cold Side Outlet Temperature: {Tcold_out_fn:.2f} C")
print(f"LMTD {LMTD:.2f} C")
print(f"Heat Transfer {Q_fn:.2f} W")
