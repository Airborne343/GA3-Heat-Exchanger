import numpy as np
from scipy.optimize import fsolve
from scipy.interpolate import griddata

#Tables for compressor chics
def Coldchic(qdot = None, p = None): #cm3/s to Pa
    if p == None: 
        poly = np.poly1d([-2.03241506e+17,  2.18666233e+14, -1.17200431e+11, -4.34105885e+07,
  7.07758580e+04])
        return poly(qdot)
    
    elif qdot == None:
        poly = np.poly1d([-1.12242099e-23, 1.58646220e-18, -1.69351833e-13, -2.28742118e-09,
  7.29640030e-04])
        return poly(p)
    else:
        raise("Invalid input, only input one of pressure or mass flow")
          

def Hotchic(qdot = None, p = None): #cm3/s to Pa
    if p == None: 
        poly = np.poly1d([1.36023711e+14, -2.12561947e+11, -5.47282451e+07,  6.21083811e+04])
        return poly(qdot)
    
    elif qdot == None:
        poly = np.poly1d([-1.71799882e-18,  1.21807382e-13, -9.14198807e-09,  5.12949839e-04])
        return poly(p)
    else:
        raise("Invalid input, only input one of pressure or mass flow")

#Tables for friction factor
def Friction(Re = None, epsilon = 0.002, D = 8 ): #https://www.engineeringtoolbox.com/surface-roughness-ventilation-ducts-d_209.html
    if Re < 2000:
        return 64/Re
    else:
        return (-1.8 * np.log10((epsilon / D / 3.7)**1.11 + 6.9 / Re))**-2


def Kc(sigma, Re):
    #These fitting is determined via Figure 8 in the handout
    poly_m = np.poly1d([-3.4112395e9,  1.3174895e6,   -97.6365546,  -0.4])
    poly_c = np.poly1d([1.15879727e10, -7.49109769e6,  1633.23004,  0.4])
    
    x = 1.0 / Re
    return poly_m(x) * sigma + poly_c(x)

def Ke(sigma, Re):
    #These fitting is determined via Figure 8 in the handout
    # Cubic-in-x coefficients for each sigma^k term (descending powers of x)
    # d3(x) multiplies sigma^3
    _coef_d3 = np.array([-1.11383048e+11,   4.92744792e+07,  -4.37578675e+03,  -5.95238095e-02])
    # d2(x) multiplies sigma^2
    _coef_d2 = np.array([ 1.93887205e+11,  -8.58331318e+07,   7.75224537e+03,   1.05357143e+00])
    # d1(x) multiplies sigma^1
    _coef_d1 = np.array([-9.66470141e+10,   4.53015098e+07,  -5.10931576e+03,  -1.99404762e+00])
    # d0(x) multiplies sigma^0 (constant term)
    _coef_d0 = np.array([-5.18889235e-04,   2.65109503e-07,  -3.10673330e-11,   1.00000000e+00])

    σ, R = np.broadcast_arrays(sigma, Re)
    # x = 1/Re, but x=0 when Re==inf to hit the asymptote curves
    x = np.where(np.isinf(R), 0.0, 1.0 / R)

    # Evaluate each cubic d_i(x) via polyval
    d3 = np.polyval(_coef_d3, x)
    d2 = np.polyval(_coef_d2, x)
    d1 = np.polyval(_coef_d1, x)
    d0 = np.polyval(_coef_d0, x)

    # Return the combined cubic‐in‐sigma polynomial
    return d3*σ**3 + d2*σ**2 + d1*σ + d0

#F factor calculations
R = np.linspace(0, 5, 51)
P = np.linspace(0, 1, 11)
N = np.linspace(1, 2, 2)

F = np.zeros((len(R), len(P), len(N)))

#4d points F factor LMTD
LMTD_points = np.array([
    [5.0, 0.000, 1, 1.00],
    [5.0, 0.132, 1, 0.95],
    [5.0, 0.152, 1, 0.90],
    [5.0, 0.162, 1, 0.85],
    [5.0, 0.168, 1, 0.80],
    [5.0, 0.172, 1, 0.75],
    [5.0, 0.174, 1, 0.70],
    [5.0, 0.176, 1, 0.65],
    [5.0, 0.178, 1, 0.60],
    [5.0, 0.179, 1, 0.55],
    [5.0, 0.179, 1, 0.50],

    [5.0, 0.173, 2, 1.00],
    [5.0, 0.186, 2, 0.95],
    [5.0, 0.190, 2, 0.90],
    [5.0, 0.192, 2, 0.85],
    [5.0, 0.193, 2, 0.80],
    [5.0, 0.195, 2, 0.75],
    [5.0, 0.195, 2, 0.70],
    [5.0, 0.195, 2, 0.65],
    [5.0, 0.195, 2, 0.60],
    [5.0, 0.195, 2, 0.55],
    [5.0, 0.195, 2, 0.50],

    [3.0, 0.000, 1, 1.00],
    [3.0, 0.187, 1, 0.95],
    [3.0, 0.222, 1, 0.90],
    [3.0, 0.240, 1, 0.85],
    [3.0, 0.252, 1, 0.80],
    [3.0, 0.260, 1, 0.75],
    [3.0, 0.266, 1, 0.70],
    [3.0, 0.270, 1, 0.65],
    [3.0, 0.273, 1, 0.60],
    [3.0, 0.276, 1, 0.55],
    [3.0, 0.277, 1, 0.50],

    [3.0, 0.000, 2, 1.00],
    [3.0, 0.261, 2, 0.95],
    [3.0, 0.288, 2, 0.90],
    [3.0, 0.301, 2, 0.85],
    [3.0, 0.307, 2, 0.80],
    [3.0, 0.312, 2, 0.75],
    [3.0, 0.315, 2, 0.70],
    [3.0, 0.316, 2, 0.65],
    [3.0, 0.318, 2, 0.60],
    [3.0, 0.319, 2, 0.55],
    [3.0, 0.320, 2, 0.50],

    [2.0, 0.000, 1, 1.00],
    [2.0, 0.241, 1, 0.95],
    [2.0, 0.290, 1, 0.90],
    [2.0, 0.317, 1, 0.85],
    [2.0, 0.336, 1, 0.80],
    [2.0, 0.349, 1, 0.75],
    [2.0, 0.358, 1, 0.70],
    [2.0, 0.365, 1, 0.65],
    [2.0, 0.371, 1, 0.60],
    [2.0, 0.375, 1, 0.55],
    [2.0, 0.378, 1, 0.50],

    [2.0, 0.000, 2, 1.00],
    [2.0, 0.348, 2, 0.95],
    [2.0, 0.393, 2, 0.90],
    [2.0, 0.415, 2, 0.85],
    [2.0, 0.429, 2, 0.80],
    [2.0, 0.438, 2, 0.75],
    [2.0, 0.445, 2, 0.70],
    [2.0, 0.449, 2, 0.65],
    [2.0, 0.453, 2, 0.60],
    [2.0, 0.455, 2, 0.55],
    [2.0, 0.457, 2, 0.50],

    [1.5, 0.000, 1, 1.00],
    [1.5, 0.284, 1, 0.95],
    [1.5, 0.344, 1, 0.90],
    [1.5, 0.379, 1, 0.85],
    [1.5, 0.402, 1, 0.80],
    [1.5, 0.419, 1, 0.75],
    [1.5, 0.432, 1, 0.70], 
    [1.5, 0.441, 1, 0.65],
    [1.5, 0.449, 1, 0.60],
    [1.5, 0.455, 1, 0.55],
    [1.5, 0.459, 1, 0.50],

    [1.5, 0.000, 2, 1.00],
    [1.5, 0.417, 2, 0.95],
    [1.5, 0.476, 2, 0.90],
    [1.5, 0.507, 2, 0.85],
    [1.5, 0.527, 2, 0.80],
    [1.5, 0.541, 2, 0.75],
    [1.5, 0.550, 2, 0.70], 
    [1.5, 0.558, 2, 0.65],
    [1.5, 0.563, 2, 0.60],
    [1.5, 0.567, 2, 0.55],
    [1.5, 0.570, 2, 0.50],

    [1.1, 0.000, 1, 1.00],
    [1.1, 0.330, 1, 0.95],
    [1.1, 0.403, 1, 0.90],
    [1.1, 0.445, 1, 0.85],
    [1.1, 0.474, 1, 0.80],
    [1.1, 0.495, 1, 0.75],
    [1.1, 0.511, 1, 0.70],
    [1.1, 0.523, 1, 0.65],
    [1.1, 0.532, 1, 0.60],
    [1.1, 0.539, 1, 0.55],
    [1.1, 0.544, 1, 0.50],

    [1.1, 0.000, 2, 1.00],
    [1.1, 0.493, 2, 0.95],
    [1.1, 0.569, 2, 0.90],
    [1.1, 0.610, 2, 0.85],
    [1.1, 0.636, 2, 0.80],
    [1.1, 0.654, 2, 0.75],
    [1.1, 0.667, 2, 0.70],
    [1.1, 0.677, 2, 0.65],
    [1.1, 0.685, 2, 0.60],
    [1.1, 0.691, 2, 0.55],
    [1.1, 0.695, 2, 0.50],

    [0.8, 0.000, 1, 1.00],
    [0.8, 0.392, 1, 0.95],
    [0.8, 0.477, 1, 0.90],
    [0.8, 0.526, 1, 0.85],
    [0.8, 0.559, 1, 0.80],
    [0.8, 0.583, 1, 0.75],
    [0.8, 0.602, 1, 0.70],
    [0.8, 0.615, 1, 0.65],
    [0.8, 0.626, 1, 0.60],
    [0.8, 0.634, 1, 0.55],
    [0.8, 0.640, 1, 0.50],

    [0.8, 0.000, 2, 1.00],
    [0.8, 0.576, 2, 0.95],
    [0.8, 0.664, 2, 0.90],
    [0.8, 0.710, 2, 0.85],
    [0.8, 0.740, 2, 0.80],
    [0.8, 0.760, 2, 0.75],
    [0.8, 0.776, 2, 0.70],
    [0.8, 0.787, 2, 0.65],
    [0.8, 0.795, 2, 0.60],
    [0.8, 0.802, 2, 0.55],
    [0.8, 0.807, 2, 0.50],

    [0.6, 0.000, 1, 1.00],
    [0.6, 0.447, 1, 0.95],
    [0.6, 0.540, 1, 0.90],
    [0.6, 0.594, 1, 0.85],
    [0.6, 0.629, 1, 0.80],
    [0.6, 0.655, 1, 0.75],
    [0.6, 0.675, 1, 0.70],
    [0.6, 0.689, 1, 0.65],
    [0.6, 0.700, 1, 0.60],
    [0.6, 0.709, 1, 0.55],
    [0.6, 0.715, 1, 0.50],

    [0.6, 0.000, 2, 1.00],
    [0.6, 0.651, 2, 0.95],
    [0.6, 0.742, 2, 0.90],
    [0.6, 0.790, 2, 0.85],
    [0.6, 0.819, 2, 0.80],
    [0.6, 0.840, 2, 0.75],
    [0.6, 0.854, 2, 0.70],
    [0.6, 0.864, 2, 0.65],
    [0.6, 0.872, 2, 0.60],
    [0.6, 0.878, 2, 0.55],
    [0.6, 0.882, 2, 0.50],

    [0.4, 0.000, 1, 1.00],
    [0.4, 0.528, 1, 0.95],
    [0.4, 0.630, 1, 0.90],
    [0.4, 0.686, 1, 0.85],
    [0.4, 0.722, 1, 0.80],
    [0.4, 0.747, 1, 0.75],
    [0.4, 0.766, 1, 0.70],
    [0.4, 0.779, 1, 0.65],
    [0.4, 0.790, 1, 0.60],
    [0.4, 0.797, 1, 0.55],
    [0.4, 0.803, 1, 0.50],

    [0.4, 0.000, 2, 1.00],
    [0.4, 0.747, 2, 0.95],
    [0.4, 0.836, 2, 0.90],
    [0.4, 0.878, 2, 0.85],
    [0.4, 0.902, 2, 0.80],
    [0.4, 0.918, 2, 0.75],
    [0.4, 0.928, 2, 0.70],
    [0.4, 0.936, 2, 0.65],
    [0.4, 0.941, 2, 0.60],
    [0.4, 0.945, 2, 0.55],
    [0.4, 0.948, 2, 0.50],

    [0.2, 0.000, 1, 1.00],
    [0.2, 0.666, 1, 0.95],
    [0.2, 0.767, 1, 0.90],
    [0.2, 0.817, 1, 0.85],
    [0.2, 0.846, 1, 0.80],
    [0.2, 0.865, 1, 0.75],
    [0.2, 0.878, 1, 0.70],
    [0.2, 0.888, 1, 0.65],
    [0.2, 0.894, 1, 0.60],
    [0.2, 0.900, 1, 0.55],
    [0.2, 0.902, 1, 0.50],

    [0.2, 0.000, 2, 1.00],
    [0.2, 0.877, 2, 0.95],
    [0.2, 0.938, 2, 0.90],
    [0.2, 0.962, 2, 0.85],
    [0.2, 0.973, 2, 0.80],
    [0.2, 0.979, 2, 0.75],
    [0.2, 0.984, 2, 0.70],
    [0.2, 0.986, 2, 0.65],
    [0.2, 0.988, 2, 0.60],
    [0.2, 0.989, 2, 0.55],
    [0.2, 0.990, 2, 0.50]
])

R_values = LMTD_points[:, 0]
P_values = LMTD_points[:, 1]
N_values = LMTD_points[:, 2]
F_values = LMTD_points[:, 3]

def find_F(P, R, N):
    return griddata(
        points = np.column_stack((P_values, R_values, N_values)),
        values = F_values,
        xi = np.array([[P, R, N]]),
        method = 'linear'
    )[0]

#eff points because the book is shit (NTU, Cr, Shell no., eff)
ENTU_eff_points = np.array([
    [0.10, 0, 1, 0.0952],
    [0.25, 0, 1, 0.2212],
    [0.50, 0, 1, 0.3935],
    [0.75, 0, 1, 0.5276],
    [1.00, 0, 1, 0.6321],
    [1.25, 0, 1, 0.7135],
    [1.50, 0, 1, 0.7769],
    [1.75, 0, 1, 0.8262],
    [2.00, 0, 1, 0.8647],
    [2.25, 0, 1, 0.8946],
    [2.50, 0, 1, 0.9179],
    [2.75, 0, 1, 0.9361],
    [3.00, 0, 1, 0.9502],
    [3.25, 0, 1, 0.9612],
    [3.50, 0, 1, 0.9698],
    [3.75, 0, 1, 0.9765],
    [4.00, 0, 1, 0.9817],
    [4.25, 0, 1, 0.9857],
    [4.50, 0, 1, 0.9889],
    [4.75, 0, 1, 0.9913],
    [5.00, 0, 1, 0.9933],
    [5.25, 0, 1, 0.9948],
    [5.50, 0, 1, 0.9959],
    [5.75, 0, 1, 0.9968],
    [6.00, 0, 1, 0.9975],
    [6.25, 0, 1, 0.9981],
    [6.50, 0, 1, 0.9985],
    [6.75, 0, 1, 0.9988],
    [7.00, 0, 1, 0.9991],
    [7.25, 0, 1, 0.9993],
    [7.50, 0, 1, 0.9994],
    [7.75, 0, 1, 0.9996],
    [8.00, 0, 1, 0.9997],
    [8.25, 0, 1, 0.9997],
    [8.50, 0, 1, 0.9998],
    [8.75, 0, 1, 0.9998],
    [9.00, 0, 1, 0.9999],
    [9.25, 0, 1, 0.9999],
    [9.50, 0, 1, 0.9999],
    [9.75, 0, 1, 0.9999],
    [10.0, 0, 1, 1.0000],

    [0.10, 0, 2, 0.0952],
    [0.25, 0, 2, 0.2212],
    [0.50, 0, 2, 0.3935],
    [0.75, 0, 2, 0.5276],
    [1.00, 0, 2, 0.6321],
    [1.25, 0, 2, 0.7135],
    [1.50, 0, 2, 0.7769],
    [1.75, 0, 2, 0.8262],
    [2.00, 0, 2, 0.8647],
    [2.25, 0, 2, 0.8946],
    [2.50, 0, 2, 0.9179],
    [2.75, 0, 2, 0.9361],
    [3.00, 0, 2, 0.9502],
    [3.25, 0, 2, 0.9612],
    [3.50, 0, 2, 0.9698],
    [3.75, 0, 2, 0.9765],
    [4.00, 0, 2, 0.9817],
    [4.25, 0, 2, 0.9857],
    [4.50, 0, 2, 0.9889],
    [4.75, 0, 2, 0.9913],
    [5.00, 0, 2, 0.9933],
    [5.25, 0, 2, 0.9948],
    [5.50, 0, 2, 0.9959],
    [5.75, 0, 2, 0.9968],
    [6.00, 0, 2, 0.9975],
    [6.25, 0, 2, 0.9981],
    [6.50, 0, 2, 0.9985],
    [6.75, 0, 2, 0.9988],
    [7.00, 0, 2, 0.9991],
    [7.25, 0, 2, 0.9993],
    [7.50, 0, 2, 0.9994],
    [7.75, 0, 2, 0.9996],
    [8.00, 0, 2, 0.9997],
    [8.25, 0, 2, 0.9997],
    [8.50, 0, 2, 0.9998],
    [8.75, 0, 2, 0.9998],
    [9.00, 0, 2, 0.9999],
    [9.25, 0, 2, 0.9999],
    [9.50, 0, 2, 0.9999],
    [9.75, 0, 2, 0.9999],
    [10.0, 0, 2, 1.0000],

    [0.10, 0.25, 1, 0.0940],
    [0.25, 0.25, 1, 0.2152],
    [0.50, 0.25, 1, 0.3747],
    [0.75, 0.25, 1, 0.4940],
    [1.00, 0.25, 1, 0.5841],
    [1.25, 0.25, 1, 0.6524],
    [1.50, 0.25, 1, 0.7045],
    [1.75, 0.25, 1, 0.7443],
    [2.00, 0.25, 1, 0.7748],
    [2.25, 0.25, 1, 0.7982],
    [2.50, 0.25, 1, 0.8162],
    [2.75, 0.25, 1, 0.8301],
    [3.00, 0.25, 1, 0.8408],
    [3.25, 0.25, 1, 0.8490],
    [3.50, 0.25, 1, 0.8553],
    [3.75, 0.25, 1, 0.8603],
    [4.00, 0.25, 1, 0.8640],
    [4.25, 0.25, 1, 0.8670],
    [4.50, 0.25, 1, 0.8692],
    [4.75, 0.25, 1, 0.8710],
    [5.00, 0.25, 1, 0.8723],
    [5.25, 0.25, 1, 0.8734],
    [5.50, 0.25, 1, 0.8742],
    [5.75, 0.25, 1, 0.8748],
    [6.00, 0.25, 1, 0.8753],
    [6.25, 0.25, 1, 0.8756],
    [6.50, 0.25, 1, 0.8759],
    [6.75, 0.25, 1, 0.8761],
    [7.00, 0.25, 1, 0.8763],
    [7.25, 0.25, 1, 0.8764],
    [7.50, 0.25, 1, 0.8765],
    [7.75, 0.25, 1, 0.8766],
    [8.00, 0.25, 1, 0.8767],
    [8.25, 0.25, 1, 0.8767],
    [8.50, 0.25, 1, 0.8768],
    [8.75, 0.25, 1, 0.8768],
    [9.00, 0.25, 1, 0.8768],
    [9.25, 0.25, 1, 0.8768],
    [9.50, 0.25, 1, 0.8769],
    [9.75, 0.25, 1, 0.8769],
    [10.0, 0.25, 1, 0.8769],
    
    [0.10, 0.25, 2, 0.0941],
    [0.25, 0.25, 2, 0.2155],
    [0.50, 0.25, 2, 0.3769],
    [0.75, 0.25, 2, 0.4998],
    [1.00, 0.25, 2, 0.5947],
    [1.25, 0.25, 2, 0.6689],
    [1.50, 0.25, 2, 0.7274],
    [1.75, 0.25, 2, 0.7738],
    [2.00, 0.25, 2, 0.8109],
    [2.25, 0.25, 2, 0.8407],
    [2.50, 0.25, 2, 0.8648],
    [2.75, 0.25, 2, 0.8844],
    [3.00, 0.25, 2, 0.9003],
    [3.25, 0.25, 2, 0.9134],
    [3.50, 0.25, 2, 0.9241],
    [3.75, 0.25, 2, 0.9330],
    [4.00, 0.25, 2, 0.9403],
    [4.25, 0.25, 2, 0.9464],
    [4.50, 0.25, 2, 0.9516],
    [4.75, 0.25, 2, 0.9559],
    [5.00, 0.25, 2, 0.9595],
    [5.25, 0.25, 2, 0.9625],
    [5.50, 0.25, 2, 0.9651],
    [5.75, 0.25, 2, 0.9673],
    [6.00, 0.25, 2, 0.9692],
    [6.25, 0.25, 2, 0.9708],
    [6.50, 0.25, 2, 0.9722],
    [6.75, 0.25, 2, 0.9734],
    [7.00, 0.25, 2, 0.9744],
    [7.25, 0.25, 2, 0.9753],
    [7.50, 0.25, 2, 0.9760],
    [7.75, 0.25, 2, 0.9767],
    [8.00, 0.25, 2, 0.9773],
    [8.25, 0.25, 2, 0.9778],
    [8.50, 0.25, 2, 0.9782],
    [8.75, 0.25, 2, 0.9786],
    [9.00, 0.25, 2, 0.9789],
    [9.25, 0.25, 2, 0.9792],
    [9.50, 0.25, 2, 0.9795],
    [9.75, 0.25, 2, 0.9797],
    [10.0, 0.25, 2, 0.9799],

    [0.10, 0.50, 1, 0.0929],
    [0.25, 0.50, 1, 0.2094],
    [0.50, 0.50, 1, 0.3569],
    [0.75, 0.50, 1, 0.4628],
    [1.00, 0.50, 1, 0.5399],
    [1.25, 0.50, 1, 0.5966],
    [1.50, 0.50, 1, 0.6385],
    [1.75, 0.50, 1, 0.6698],
    [2.00, 0.50, 1, 0.6931],
    [2.25, 0.50, 1, 0.7106],
    [2.50, 0.50, 1, 0.7237],
    [2.75, 0.50, 1, 0.7336],
    [3.00, 0.50, 1, 0.7410],
    [3.25, 0.50, 1, 0.7466],
    [3.50, 0.50, 1, 0.7509],
    [3.75, 0.50, 1, 0.7541],
    [4.00, 0.50, 1, 0.7565],
    [4.25, 0.50, 1, 0.7583],
    [4.50, 0.50, 1, 0.7597],
    [4.75, 0.50, 1, 0.7607],
    [5.00, 0.50, 1, 0.7615],
    [5.25, 0.50, 1, 0.7621],
    [5.50, 0.50, 1, 0.7625],
    [5.75, 0.50, 1, 0.7629],
    [6.00, 0.50, 1, 0.7631],
    [6.25, 0.50, 1, 0.7633],
    [6.50, 0.50, 1, 0.7635],
    [6.75, 0.50, 1, 0.7636],
    [7.00, 0.50, 1, 0.7637],
    [7.25, 0.50, 1, 0.7637],
    [7.50, 0.50, 1, 0.7638],
    [7.75, 0.50, 1, 0.7638],
    [8.00, 0.50, 1, 0.7638],
    [8.25, 0.50, 1, 0.7639],
    [8.50, 0.50, 1, 0.7639],
    [8.75, 0.50, 1, 0.7639],
    [9.00, 0.50, 1, 0.7639],
    [9.25, 0.50, 1, 0.7639],
    [9.50, 0.50, 1, 0.7639],
    [9.75, 0.50, 1, 0.7639],
    [10.0, 0.50, 1, 0.7639],
    
    [0.10, 0.50, 2, 0.0930],
    [0.25, 0.50, 2, 0.2101],
    [0.50, 0.50, 2, 0.3609],
    [0.75, 0.50, 2, 0.4730],
    [1.00, 0.50, 2, 0.5583],
    [1.25, 0.50, 2, 0.6246],
    [1.50, 0.50, 2, 0.6768],
    [1.75, 0.50, 2, 0.7186],
    [2.00, 0.50, 2, 0.7522],
    [2.25, 0.50, 2, 0.7796],
    [2.50, 0.50, 2, 0.8020],
    [2.75, 0.50, 2, 0.8205],
    [3.00, 0.50, 2, 0.8359],
    [3.25, 0.50, 2, 0.8487],
    [3.50, 0.50, 2, 0.8594],
    [3.75, 0.50, 2, 0.8684],
    [4.00, 0.50, 2, 0.8760],
    [4.25, 0.50, 2, 0.8825],
    [4.50, 0.50, 2, 0.8879],
    [4.75, 0.50, 2, 0.8926],
    [5.00, 0.50, 2, 0.8966],
    [5.25, 0.50, 2, 0.9000],
    [5.50, 0.50, 2, 0.9029],
    [5.75, 0.50, 2, 0.9054],
    [6.00, 0.50, 2, 0.9075],
    [6.25, 0.50, 2, 0.9094],
    [6.50, 0.50, 2, 0.9110],
    [6.75, 0.50, 2, 0.9124],
    [7.00, 0.50, 2, 0.9136],
    [7.25, 0.50, 2, 0.9146],
    [7.50, 0.50, 2, 0.9155],
    [7.75, 0.50, 2, 0.9163],
    [8.00, 0.50, 2, 0.9169],
    [8.25, 0.50, 2, 0.9175],
    [8.50, 0.50, 2, 0.9180],
    [8.75, 0.50, 2, 0.9184],
    [9.00, 0.50, 2, 0.9188],
    [9.25, 0.50, 2, 0.9191],
    [9.50, 0.50, 2, 0.9194],
    [9.75, 0.50, 2, 0.9197],
    [10.0, 0.50, 2, 0.9199],

    [0.10, 0.75, 1, 0.0918],
    [0.25, 0.75, 1, 0.2038],
    [0.50, 0.75, 1, 0.3402],
    [0.75, 0.75, 1, 0.4339],
    [1.00, 0.75, 1, 0.4995],
    [1.25, 0.75, 1, 0.5460],
    [1.50, 0.75, 1, 0.5792],
    [1.75, 0.75, 1, 0.6031],
    [2.00, 0.75, 1, 0.6204],
    [2.25, 0.75, 1, 0.6330],
    [2.50, 0.75, 1, 0.6421],
    [2.75, 0.75, 1, 0.6487],
    [3.00, 0.75, 1, 0.6535],
    [3.25, 0.75, 1, 0.6571],
    [3.50, 0.75, 1, 0.6597],
    [3.75, 0.75, 1, 0.6615],
    [4.00, 0.75, 1, 0.6629],
    [4.25, 0.75, 1, 0.6639],
    [4.50, 0.75, 1, 0.6647],
    [4.75, 0.75, 1, 0.6652],
    [5.00, 0.75, 1, 0.6656],
    [5.25, 0.75, 1, 0.6659],
    [5.50, 0.75, 1, 0.6661],
    [5.75, 0.75, 1, 0.6662],
    [6.00, 0.75, 1, 0.6664],
    [6.25, 0.75, 1, 0.6664],
    [6.50, 0.75, 1, 0.6665],
    [6.75, 0.75, 1, 0.6665],
    [7.00, 0.75, 1, 0.6666],
    [7.25, 0.75, 1, 0.6666],
    [7.50, 0.75, 1, 0.6666],
    [7.75, 0.75, 1, 0.6666],
    [8.00, 0.75, 1, 0.6666],
    [8.25, 0.75, 1, 0.6666],
    [8.50, 0.75, 1, 0.6667],
    [8.75, 0.75, 1, 0.6667],
    [9.00, 0.75, 1, 0.6667],
    [9.25, 0.75, 1, 0.6667],
    [9.50, 0.75, 1, 0.6667],
    [9.75, 0.75, 1, 0.6667],
    [10.0, 0.75, 1, 0.6667],
    
    [0.10, 0.75, 2, 0.0919],
    [0.25, 0.75, 2, 0.2047],
    [0.50, 0.75, 2, 0.3456],
    [0.75, 0.75, 2, 0.4473],
    [1.00, 0.75, 2, 0.5233],
    [1.25, 0.75, 2, 0.5814],
    [1.50, 0.75, 2, 0.6269],
    [1.75, 0.75, 2, 0.6629],
    [2.00, 0.75, 2, 0.6918],
    [2.25, 0.75, 2, 0.7153],
    [2.50, 0.75, 2, 0.7345],
    [2.75, 0.75, 2, 0.7503],
    [3.00, 0.75, 2, 0.7634],
    [3.25, 0.75, 2, 0.7743],
    [3.50, 0.75, 2, 0.7834],
    [3.75, 0.75, 2, 0.7910],
    [4.00, 0.75, 2, 0.7975],
    [4.25, 0.75, 2, 0.8029],
    [4.50, 0.75, 2, 0.8074],
    [4.75, 0.75, 2, 0.8113],
    [5.00, 0.75, 2, 0.8146],
    [5.25, 0.75, 2, 0.8173],
    [5.50, 0.75, 2, 0.8197],
    [5.75, 0.75, 2, 0.8217],
    [6.00, 0.75, 2, 0.8234],
    [6.25, 0.75, 2, 0.8249],
    [6.50, 0.75, 2, 0.8261],
    [6.75, 0.75, 2, 0.8271],
    [7.00, 0.75, 2, 0.8280],
    [7.25, 0.75, 2, 0.8288],
    [7.50, 0.75, 2, 0.8295],
    [7.75, 0.75, 2, 0.8300],
    [8.00, 0.75, 2, 0.8305],
    [8.25, 0.75, 2, 0.8309],
    [8.50, 0.75, 2, 0.8313],
    [8.75, 0.75, 2, 0.8316],
    [9.00, 0.75, 2, 0.8318],
    [9.25, 0.75, 2, 0.8320],
    [9.50, 0.75, 2, 0.8322],
    [9.75, 0.75, 2, 0.8324],
    [10.0, 0.75, 2, 0.8325],

    [0.10, 1.00, 1, 0.0908],
    [0.25, 1.00, 1, 0.1986],
    [0.50, 1.00, 1, 0.3250],
    [0.75, 1.00, 1, 0.4082],
    [1.00, 1.00, 1, 0.4641],
    [1.25, 1.00, 1, 0.5022],
    [1.50, 1.00, 1, 0.5284],
    [1.75, 1.00, 1, 0.5465],
    [2.00, 1.00, 1, 0.5592],
    [2.25, 1.00, 1, 0.5680],
    [2.50, 1.00, 1, 0.5742],
    [2.75, 1.00, 1, 0.5785],
    [3.00, 1.00, 1, 0.5816],
    [3.25, 1.00, 1, 0.5837],
    [3.50, 1.00, 1, 0.5852],
    [3.75, 1.00, 1, 0.5862],
    [4.00, 1.00, 1, 0.5870],
    [4.25, 1.00, 1, 0.5875],
    [4.50, 1.00, 1, 0.5879],
    [4.75, 1.00, 1, 0.5881],
    [5.00, 1.00, 1, 0.5883],
    [5.25, 1.00, 1, 0.5884],
    [5.50, 1.00, 1, 0.5885],
    [5.75, 1.00, 1, 0.5886],
    [6.00, 1.00, 1, 0.5886],
    [6.25, 1.00, 1, 0.5887],
    [6.50, 1.00, 1, 0.5887],
    [6.75, 1.00, 1, 0.5887],
    [7.00, 1.00, 1, 0.5887],
    [7.25, 1.00, 1, 0.5887],
    [7.50, 1.00, 1, 0.5887],
    [7.75, 1.00, 1, 0.5887],
    [8.00, 1.00, 1, 0.5887],
    [8.25, 1.00, 1, 0.5887],
    [8.50, 1.00, 1, 0.5887],
    [8.75, 1.00, 1, 0.5887],
    [9.00, 1.00, 1, 0.5887],
    [9.25, 1.00, 1, 0.5887],
    [9.50, 1.00, 1, 0.5887],
    [9.75, 1.00, 1, 0.5887],
    [10.0, 1.00, 1, 0.5887],
    
    [0.10, 1.00, 2, 0.0909],
    [0.25, 1.00, 2, 0.1998],
    [0.50, 1.00, 2, 0.3316],
    [0.75, 1.00, 2, 0.4239],
    [1.00, 1.00, 2, 0.4912],
    [1.25, 1.00, 2, 0.5417],
    [1.50, 1.00, 2, 0.5806],
    [1.75, 1.00, 2, 0.6109],
    [2.00, 1.00, 2, 0.6350],
    [2.25, 1.00, 2, 0.6542],
    [2.50, 1.00, 2, 0.6697],
    [2.75, 1.00, 2, 0.6823],
    [3.00, 1.00, 2, 0.6926],
    [3.25, 1.00, 2, 0.7011],
    [3.50, 1.00, 2, 0.7080],
    [3.75, 1.00, 2, 0.7138],
    [4.00, 1.00, 2, 0.7186],
    [4.25, 1.00, 2, 0.7225],
    [4.50, 1.00, 2, 0.7258],
    [4.75, 1.00, 2, 0.7285],
    [5.00, 1.00, 2, 0.7308],
    [5.25, 1.00, 2, 0.7327],
    [5.50, 1.00, 2, 0.7343],
    [5.75, 1.00, 2, 0.7357],
    [6.00, 1.00, 2, 0.7368],
    [6.25, 1.00, 2, 0.7377],
    [6.50, 1.00, 2, 0.7385],
    [6.75, 1.00, 2, 0.7391],
    [7.00, 1.00, 2, 0.7397],
    [7.25, 1.00, 2, 0.7401],
    [7.50, 1.00, 2, 0.7405],
    [7.75, 1.00, 2, 0.7408],
    [8.00, 1.00, 2, 0.7411],
    [8.25, 1.00, 2, 0.7413],
    [8.50, 1.00, 2, 0.7415],
    [8.75, 1.00, 2, 0.7417],
    [9.00, 1.00, 2, 0.7418],
    [9.25, 1.00, 2, 0.7419],
    [9.50, 1.00, 2, 0.7420],
    [9.75, 1.00, 2, 0.7421],
    [10.0, 1.00, 2, 0.7422]
])

NTU_values = ENTU_eff_points[:, 0]
Cr_values = ENTU_eff_points[:, 1]
shell_no_values = ENTU_eff_points[:, 2]
eff_values = ENTU_eff_points[:, 3]

def find_eff(NTU, Cr, shellno):
    return griddata(
        points = np.column_stack((NTU_values, Cr_values, shell_no_values)),
        values = eff_values,
        xi = np.array([[NTU, Cr, shellno]]),
        method = 'linear'
    )[0]