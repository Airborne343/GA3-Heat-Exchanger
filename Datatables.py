import numpy as np
from scipy.optimize import fsolve
from scipy.interpolate import griddata

#Tables for compressor chics
def Coldchic(qdot = None, p = None): #cm3/s to Pa
    if p == None: 
        poly = np.poly1d([-2.03241506e+17,  2.18666233e+14, -1.17200431e+11, -4.34105885e+07,
  7.07758580e+04])
        return poly(qdot)
    
    elif qdot == None:
        poly = np.poly1d([-1.12242099e-23, 1.58646220e-18, -1.69351833e-13, -2.28742118e-09,
  7.29640030e-04])
        return poly(p)
    else:
        raise("Invalid input, only input one of pressure or mass flow")
          

def Hotchic(qdot = None, p = None): #cm3/s to Pa
    if p == None: 
        poly = np.poly1d([1.36023711e+14, -2.12561947e+11, -5.47282451e+07,  6.21083811e+04])
        return poly(qdot)
    
    elif qdot == None:
        poly = np.poly1d([-1.71799882e-18,  1.21807382e-13, -9.14198807e-09,  5.12949839e-04])
        return poly(p)
    else:
        raise("Invalid input, only input one of pressure or mass flow")

#Tables for friction factor
def Friction(Re = None, epsilon = 0.002, D = 8 ): #https://www.engineeringtoolbox.com/surface-roughness-ventilation-ducts-d_209.html
    if Re < 2000:
        return 64/Re
    else:
        return (-1.8 * np.log10((epsilon / D / 3.7)**1.11 + 6.9 / Re))**-2


def Kc(sigma, Re):
    #These fitting is determined via Figure 8 in the handout
    poly_m = np.poly1d([-3.4112395e9,  1.3174895e6,   -97.6365546,  -0.4])
    poly_c = np.poly1d([1.15879727e10, -7.49109769e6,  1633.23004,  0.4])
    
    x = 1.0 / Re
    return poly_m(x) * sigma + poly_c(x)

def Ke(sigma, Re):
    #These fitting is determined via Figure 8 in the handout
    # Cubic-in-x coefficients for each sigma^k term (descending powers of x)
    # d3(x) multiplies sigma^3
    _coef_d3 = np.array([-1.11383048e+11,   4.92744792e+07,  -4.37578675e+03,  -5.95238095e-02])
    # d2(x) multiplies sigma^2
    _coef_d2 = np.array([ 1.93887205e+11,  -8.58331318e+07,   7.75224537e+03,   1.05357143e+00])
    # d1(x) multiplies sigma^1
    _coef_d1 = np.array([-9.66470141e+10,   4.53015098e+07,  -5.10931576e+03,  -1.99404762e+00])
    # d0(x) multiplies sigma^0 (constant term)
    _coef_d0 = np.array([-5.18889235e-04,   2.65109503e-07,  -3.10673330e-11,   1.00000000e+00])

    σ, R = np.broadcast_arrays(sigma, Re)
    # x = 1/Re, but x=0 when Re==inf to hit the asymptote curves
    x = np.where(np.isinf(R), 0.0, 1.0 / R)

    # Evaluate each cubic d_i(x) via polyval
    d3 = np.polyval(_coef_d3, x)
    d2 = np.polyval(_coef_d2, x)
    d1 = np.polyval(_coef_d1, x)
    d0 = np.polyval(_coef_d0, x)

    # Return the combined cubic‐in‐sigma polynomial
    return d3*σ**3 + d2*σ**2 + d1*σ + d0

#F factor calculations
R = np.linspace(0, 5, 51)
P = np.linspace(0, 1, 11)
N = np.linspace(1, 2, 2)

F = np.zeros((len(R), len(P), len(N)))

#4d points
points = np.array([
    [5.0, 0.000, 1, 1.00],
    [5.0, 0.132, 1, 0.95],
    [5.0, 0.152, 1, 0.90],
    [5.0, 0.162, 1, 0.85],
    [5.0, 0.168, 1, 0.80],
    [5.0, 0.172, 1, 0.75],
    [5.0, 0.174, 1, 0.70],
    [5.0, 0.176, 1, 0.65],
    [5.0, 0.178, 1, 0.60],
    [5.0, 0.179, 1, 0.55],
    [5.0, 0.179, 1, 0.50],

    [5.0, 0.173, 2, 1.00],
    [5.0, 0.186, 2, 0.95],
    [5.0, 0.190, 2, 0.90],
    [5.0, 0.192, 2, 0.85],
    [5.0, 0.193, 2, 0.80],
    [5.0, 0.195, 2, 0.75],
    [5.0, 0.195, 2, 0.70],
    [5.0, 0.195, 2, 0.65],
    [5.0, 0.195, 2, 0.60],
    [5.0, 0.195, 2, 0.55],
    [5.0, 0.195, 2, 0.50],

    [3.0, 0.000, 1, 1.00],
    [3.0, 0.187, 1, 0.95],
    [3.0, 0.222, 1, 0.90],
    [3.0, 0.240, 1, 0.85],
    [3.0, 0.252, 1, 0.80],
    [3.0, 0.260, 1, 0.75],
    [3.0, 0.266, 1, 0.70],
    [3.0, 0.270, 1, 0.65],
    [3.0, 0.273, 1, 0.60],
    [3.0, 0.276, 1, 0.55],
    [3.0, 0.277, 1, 0.50],

    [3.0, 0.000, 2, 1.00],
    [3.0, 0.261, 2, 0.95],
    [3.0, 0.288, 2, 0.90],
    [3.0, 0.301, 2, 0.85],
    [3.0, 0.307, 2, 0.80],
    [3.0, 0.312, 2, 0.75],
    [3.0, 0.315, 2, 0.70],
    [3.0, 0.316, 2, 0.65],
    [3.0, 0.318, 2, 0.60],
    [3.0, 0.319, 2, 0.55],
    [3.0, 0.320, 2, 0.50],

    [2.0, 0.000, 1, 1.00],
    [2.0, 0.241, 1, 0.95],
    [2.0, 0.290, 1, 0.90],
    [2.0, 0.317, 1, 0.85],
    [2.0, 0.336, 1, 0.80],
    [2.0, 0.349, 1, 0.75],
    [2.0, 0.358, 1, 0.70],
    [2.0, 0.365, 1, 0.65],
    [2.0, 0.371, 1, 0.60],
    [2.0, 0.375, 1, 0.55],
    [2.0, 0.378, 1, 0.50],

    [2.0, 0.000, 2, 1.00],
    [2.0, 0.348, 2, 0.95],
    [2.0, 0.393, 2, 0.90],
    [2.0, 0.415, 2, 0.85],
    [2.0, 0.429, 2, 0.80],
    [2.0, 0.438, 2, 0.75],
    [2.0, 0.445, 2, 0.70],
    [2.0, 0.449, 2, 0.65],
    [2.0, 0.453, 2, 0.60],
    [2.0, 0.455, 2, 0.55],
    [2.0, 0.457, 2, 0.50],

    [1.5, 0.000, 1, 1.00],
    [1.5, 0.284, 1, 0.95],
    [1.5, 0.344, 1, 0.90],
    [1.5, 0.379, 1, 0.85],
    [1.5, 0.402, 1, 0.80],
    [1.5, 0.419, 1, 0.75],
    [1.5, 0.432, 1, 0.70], 
    [1.5, 0.441, 1, 0.65],
    [1.5, 0.449, 1, 0.60],
    [1.5, 0.455, 1, 0.55],
    [1.5, 0.459, 1, 0.50],

    [1.5, 0.000, 2, 1.00],
    [1.5, 0.417, 2, 0.95],
    [1.5, 0.476, 2, 0.90],
    [1.5, 0.507, 2, 0.85],
    [1.5, 0.527, 2, 0.80],
    [1.5, 0.541, 2, 0.75],
    [1.5, 0.550, 2, 0.70], 
    [1.5, 0.558, 2, 0.65],
    [1.5, 0.563, 2, 0.60],
    [1.5, 0.567, 2, 0.55],
    [1.5, 0.570, 2, 0.50],

    [1.1, 0.000, 1, 1.00],
    [1.1, 0.330, 1, 0.95],
    [1.1, 0.403, 1, 0.90],
    [1.1, 0.445, 1, 0.85],
    [1.1, 0.474, 1, 0.80],
    [1.1, 0.495, 1, 0.75],
    [1.1, 0.511, 1, 0.70],
    [1.1, 0.523, 1, 0.65],
    [1.1, 0.532, 1, 0.60],
    [1.1, 0.539, 1, 0.55],
    [1.1, 0.544, 1, 0.50],

    [1.1, 0.000, 2, 1.00],
    [1.1, 0.493, 2, 0.95],
    [1.1, 0.569, 2, 0.90],
    [1.1, 0.610, 2, 0.85],
    [1.1, 0.636, 2, 0.80],
    [1.1, 0.654, 2, 0.75],
    [1.1, 0.667, 2, 0.70],
    [1.1, 0.677, 2, 0.65],
    [1.1, 0.685, 2, 0.60],
    [1.1, 0.691, 2, 0.55],
    [1.1, 0.695, 2, 0.50],

    [0.8, 0.000, 1, 1.00],
    [0.8, 0.392, 1, 0.95],
    [0.8, 0.477, 1, 0.90],
    [0.8, 0.526, 1, 0.85],
    [0.8, 0.559, 1, 0.80],
    [0.8, 0.583, 1, 0.75],
    [0.8, 0.602, 1, 0.70],
    [0.8, 0.615, 1, 0.65],
    [0.8, 0.626, 1, 0.60],
    [0.8, 0.634, 1, 0.55],
    [0.8, 0.640, 1, 0.50],

    [0.8, 0.000, 2, 1.00],
    [0.8, 0.576, 2, 0.95],
    [0.8, 0.664, 2, 0.90],
    [0.8, 0.710, 2, 0.85],
    [0.8, 0.740, 2, 0.80],
    [0.8, 0.760, 2, 0.75],
    [0.8, 0.776, 2, 0.70],
    [0.8, 0.787, 2, 0.65],
    [0.8, 0.795, 2, 0.60],
    [0.8, 0.802, 2, 0.55],
    [0.8, 0.807, 2, 0.50],

    [0.6, 0.000, 1, 1.00],
    [0.6, 0.447, 1, 0.95],
    [0.6, 0.540, 1, 0.90],
    [0.6, 0.594, 1, 0.85],
    [0.6, 0.629, 1, 0.80],
    [0.6, 0.655, 1, 0.75],
    [0.6, 0.675, 1, 0.70],
    [0.6, 0.689, 1, 0.65],
    [0.6, 0.700, 1, 0.60],
    [0.6, 0.709, 1, 0.55],
    [0.6, 0.715, 1, 0.50],

    [0.6, 0.000, 2, 1.00],
    [0.6, 0.651, 2, 0.95],
    [0.6, 0.742, 2, 0.90],
    [0.6, 0.790, 2, 0.85],
    [0.6, 0.819, 2, 0.80],
    [0.6, 0.840, 2, 0.75],
    [0.6, 0.854, 2, 0.70],
    [0.6, 0.864, 2, 0.65],
    [0.6, 0.872, 2, 0.60],
    [0.6, 0.878, 2, 0.55],
    [0.6, 0.882, 2, 0.50],

    [0.4, 0.000, 1, 1.00],
    [0.4, 0.528, 1, 0.95],
    [0.4, 0.630, 1, 0.90],
    [0.4, 0.686, 1, 0.85],
    [0.4, 0.722, 1, 0.80],
    [0.4, 0.747, 1, 0.75],
    [0.4, 0.766, 1, 0.70],
    [0.4, 0.779, 1, 0.65],
    [0.4, 0.790, 1, 0.60],
    [0.4, 0.797, 1, 0.55],
    [0.4, 0.803, 1, 0.50],

    [0.4, 0.000, 2, 1.00],
    [0.4, 0.747, 2, 0.95],
    [0.4, 0.836, 2, 0.90],
    [0.4, 0.878, 2, 0.85],
    [0.4, 0.902, 2, 0.80],
    [0.4, 0.918, 2, 0.75],
    [0.4, 0.928, 2, 0.70],
    [0.4, 0.936, 2, 0.65],
    [0.4, 0.941, 2, 0.60],
    [0.4, 0.945, 2, 0.55],
    [0.4, 0.948, 2, 0.50],

    [0.2, 0.000, 1, 1.00],
    [0.2, 0.666, 1, 0.95],
    [0.2, 0.767, 1, 0.90],
    [0.2, 0.817, 1, 0.85],
    [0.2, 0.846, 1, 0.80],
    [0.2, 0.865, 1, 0.75],
    [0.2, 0.878, 1, 0.70],
    [0.2, 0.888, 1, 0.65],
    [0.2, 0.894, 1, 0.60],
    [0.2, 0.900, 1, 0.55],
    [0.2, 0.902, 1, 0.50],

    [0.2, 0.000, 2, 1.00],
    [0.2, 0.877, 2, 0.95],
    [0.2, 0.938, 2, 0.90],
    [0.2, 0.962, 2, 0.85],
    [0.2, 0.973, 2, 0.80],
    [0.2, 0.979, 2, 0.75],
    [0.2, 0.984, 2, 0.70],
    [0.2, 0.986, 2, 0.65],
    [0.2, 0.988, 2, 0.60],
    [0.2, 0.989, 2, 0.55],
    [0.2, 0.990, 2, 0.50]
])

R_values = points[:, 0]
P_values = points[:, 1]
N_values = points[:, 2]
F_values = points[:, 3]

def find_F(P, R, N):
    return griddata(
        points = np.column_stack((P_values, R_values, N_values)),
        values = F_values,
        xi = np.array([[P, R, N]]),
        method = 'linear'
    )[0]